"use strict";(self.webpackChunkpingcap_docs=self.webpackChunkpingcap_docs||[]).push([[2881],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=m(a),d=r,N=u["".concat(p,".").concat(d)]||u[d]||o[d]||i;return a?n.createElement(N,l(l({ref:t},c),{},{components:a})):n.createElement(N,l({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8028:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return m},assets:function(){return c},toc:function(){return o},default:function(){return d}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],s={title:"Enable TLS between TiDB Components",summary:"Learn how to enable TLS between TiDB components on Kubernetes."},p="Enable TLS between TiDB Components",m={unversionedId:"enable-tls-between-components",id:"enable-tls-between-components",title:"Enable TLS between TiDB Components",description:"This document describes how to enable Transport Layer Security (TLS) between components of the TiDB cluster in Kubernetes, which is supported since TiDB Operator v1.1.",source:"@site/docs/enable-tls-between-components.md",sourceDirName:".",slug:"/enable-tls-between-components",permalink:"/docusaurus-operator/enable-tls-between-components",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/enable-tls-between-components.md",tags:[],version:"current",frontMatter:{title:"Enable TLS between TiDB Components",summary:"Learn how to enable TLS between TiDB components on Kubernetes."},sidebar:"mySidebar",previous:{title:"Enable TLS for the MySQL Client",permalink:"/docusaurus-operator/enable-tls-for-mysql-client"},next:{title:"Enable TLS for DM",permalink:"/docusaurus-operator/enable-tls-for-dm"}},c={},o=[{value:"Generate certificates for components of the TiDB cluster",id:"generate-certificates-for-components-of-the-tidb-cluster",level:2},{value:"Using <code>cfssl</code>",id:"using-cfssl",level:3},{value:"Using <code>cert-manager</code>",id:"using-cert-manager",level:3},{value:"Deploy the TiDB cluster",id:"deploy-the-tidb-cluster",level:2},{value:"Configure <code>pd-ctl</code>, <code>tikv-ctl</code> and connect to the cluster",id:"configure-pd-ctl-tikv-ctl-and-connect-to-the-cluster",level:2}],u={toc:o};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"enable-tls-between-tidb-components"},"Enable TLS between TiDB Components"),(0,i.kt)("p",null,"This document describes how to enable Transport Layer Security (TLS) between components of the TiDB cluster in Kubernetes, which is supported since TiDB Operator v1.1."),(0,i.kt)("p",null,"To enable TLS between TiDB components, perform the following steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate certificates for each component of the TiDB cluster to be created:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A set of server-side certificates for the PD/TiKV/TiDB/Pump/Drainer/TiFlash/TiKV Importer/TiDB Lightning component, saved as the Kubernetes Secret objects: ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-${component_name}-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A set of shared client-side certificates for the various clients of each component, saved as the Kubernetes Secret objects: ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-cluster-client-secret"),"."),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")),(0,i.kt)("p",{parentName:"blockquote"},"The Secret objects you created must follow the above naming convention. Otherwise, the deployment of the TiDB components will fail."))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Deploy the cluster, and set ",(0,i.kt)("inlineCode",{parentName:"p"},".spec.tlsCluster.enabled")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")),(0,i.kt)("p",{parentName:"blockquote"},"After the cluster is created, do not modify this field; otherwise, the cluster will fail to upgrade."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure ",(0,i.kt)("inlineCode",{parentName:"p"},"pd-ctl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"tikv-ctl")," to connect to the cluster."))),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ul",{parentName:"div"},(0,i.kt)("li",{parentName:"ul"},"TiDB 4.0.5 (or later versions) and TiDB Operator 1.1.4 (or later versions) support enabling TLS for TiFlash."),(0,i.kt)("li",{parentName:"ul"},"TiDB 4.0.3 (or later versions) and TiDB Operator 1.1.3 (or later versions) support enabling TLS for TiCDC.")))),(0,i.kt)("p",null,"Certificates can be issued in multiple methods. This document describes two methods. You can choose either of them to issue certificates for the TiDB cluster:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#using-cfssl"},"Using the ",(0,i.kt)("inlineCode",{parentName:"a"},"cfssl")," system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#using-cert-manager"},"Using the ",(0,i.kt)("inlineCode",{parentName:"a"},"cert-manager")," system"))),(0,i.kt)("p",null,"If you need to renew the existing TLS certificate, refer to ",(0,i.kt)("a",{parentName:"p",href:"/docusaurus-operator/renew-tls-certificate"},"Renew and Replace the TLS Certificate"),"."),(0,i.kt)("h2",{id:"generate-certificates-for-components-of-the-tidb-cluster"},"Generate certificates for components of the TiDB cluster"),(0,i.kt)("p",null,"This section describes how to issue certificates using two methods: ",(0,i.kt)("inlineCode",{parentName:"p"},"cfssl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager"),"."),(0,i.kt)("h3",{id:"using-cfssl"},"Using ",(0,i.kt)("inlineCode",{parentName:"h3"},"cfssl")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Download ",(0,i.kt)("inlineCode",{parentName:"p"},"cfssl")," and initialize the certificate issuer:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p ~/bin\ncurl -s -L -o ~/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\ncurl -s -L -o ~/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x ~/bin/{cfssl,cfssljson}\nexport PATH=$PATH:~/bin\n\nmkdir -p cfssl\ncd cfssl\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"ca-config.json")," configuration file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'cat << EOF > ca-config.json\n{\n    "signing": {\n        "default": {\n            "expiry": "8760h"\n        },\n        "profiles": {\n            "internal": {\n                "expiry": "8760h",\n                "usages": [\n                    "signing",\n                    "key encipherment",\n                    "server auth",\n                    "client auth"\n                ]\n            },\n            "client": {\n                "expiry": "8760h",\n                "usages": [\n                    "signing",\n                    "key encipherment",\n                    "client auth"\n                ]\n            }\n        }\n    }\n}\nEOF\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"ca-csr.json")," configuration file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'cat << EOF > ca-csr.json\n{\n    "CN": "TiDB",\n    "CA": {\n        "expiry": "87600h"\n    },\n    "key": {\n        "algo": "rsa",\n        "size": 2048\n    },\n    "names": [\n        {\n            "C": "US",\n            "L": "CA",\n            "O": "PingCAP",\n            "ST": "Beijing",\n            "OU": "TiDB"\n        }\n    ]\n}\nEOF\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate CA by the configured option:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -initca ca-csr.json | cfssljson -bare ca -\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the server-side certificates:"),(0,i.kt)("p",{parentName:"li"},"In this step, a set of server-side certificate is created for each component of the TiDB cluster."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"PD"),(0,i.kt)("p",{parentName:"li"},"  First, generate the default ",(0,i.kt)("inlineCode",{parentName:"p"},"pd-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > pd-server.json\n")),(0,i.kt)("p",{parentName:"li"},"  Then, edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "${cluster_name}-pd",\n      "${cluster_name}-pd.${namespace}",\n      "${cluster_name}-pd.${namespace}.svc",\n      "${cluster_name}-pd-peer",\n      "${cluster_name}-pd-peer.${namespace}",\n      "${cluster_name}-pd-peer.${namespace}.svc",\n      "*.${cluster_name}-pd-peer",\n      "*.${cluster_name}-pd-peer.${namespace}",\n      "*.${cluster_name}-pd-peer.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),"."),(0,i.kt)("p",{parentName:"li"},"  Finally, generate the PD server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal pd-server.json | cfssljson -bare pd-server\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiKV"),(0,i.kt)("p",{parentName:"li"},"  First, generate the default ",(0,i.kt)("inlineCode",{parentName:"p"},"tikv-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > tikv-server.json\n")),(0,i.kt)("p",{parentName:"li"},"  Then, edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "${cluster_name}-tikv",\n      "${cluster_name}-tikv.${namespace}",\n      "${cluster_name}-tikv.${namespace}.svc",\n      "${cluster_name}-tikv-peer",\n      "${cluster_name}-tikv-peer.${namespace}",\n      "${cluster_name}-tikv-peer.${namespace}.svc",\n      "*.${cluster_name}-tikv-peer",\n      "*.${cluster_name}-tikv-peer.${namespace}",\n      "*.${cluster_name}-tikv-peer.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),"."),(0,i.kt)("p",{parentName:"li"},"  Finally, generate the TiKV server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal tikv-server.json | cfssljson -bare tikv-server\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiDB"),(0,i.kt)("p",{parentName:"li"},"  First, create the default ",(0,i.kt)("inlineCode",{parentName:"p"},"tidb-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > tidb-server.json\n")),(0,i.kt)("p",{parentName:"li"},"  Then, edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "${cluster_name}-tidb",\n      "${cluster_name}-tidb.${namespace}",\n      "${cluster_name}-tidb.${namespace}.svc",\n      "${cluster_name}-tidb-peer",\n      "${cluster_name}-tidb-peer.${namespace}",\n      "${cluster_name}-tidb-peer.${namespace}.svc",\n      "*.${cluster_name}-tidb-peer",\n      "*.${cluster_name}-tidb-peer.${namespace}",\n      "*.${cluster_name}-tidb-peer.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),"."),(0,i.kt)("p",{parentName:"li"},"  Finally, generate the TiDB server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal tidb-server.json | cfssljson -bare tidb-server\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Pump"),(0,i.kt)("p",{parentName:"li"},"  First, create the default ",(0,i.kt)("inlineCode",{parentName:"p"},"pump-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > pump-server.json\n")),(0,i.kt)("p",{parentName:"li"},"  Then, edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "*.${cluster_name}-pump",\n      "*.${cluster_name}-pump.${namespace}",\n      "*.${cluster_name}-pump.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),"."),(0,i.kt)("p",{parentName:"li"},"  Finally, generate the Pump server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal pump-server.json | cfssljson -bare pump-server\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Drainer"),(0,i.kt)("p",{parentName:"li"},"  First, generate the default ",(0,i.kt)("inlineCode",{parentName:"p"},"drainer-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > drainer-server.json\n")),(0,i.kt)("p",{parentName:"li"},"  Then, edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "<for hosts list, see the following instructions>"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},"  Drainer is deployed using Helm. The ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," field varies with different configuration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file."),(0,i.kt)("p",{parentName:"li"},"  If you have set the ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," attribute when deploying Drainer as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n# Changes the names of the statefulset and Pod.\n# The default value is clusterName-ReleaseName-drainer.\n# Does not change the name of an existing running Drainer, which is unsupported.\ndrainerName: my-drainer\n...\n")),(0,i.kt)("p",{parentName:"li"},"  Then you can set the ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attribute as described below:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "*.${drainer_name}",\n      "*.${drainer_name}.${namespace}",\n      "*.${drainer_name}.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},"  If you have not set the ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," attribute when deploying Drainer, configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attribute as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "*.${cluster_name}-${release_name}-drainer",\n      "*.${cluster_name}-${release_name}-drainer.${namespace}",\n      "*.${cluster_name}-${release_name}-drainer.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. ",(0,i.kt)("inlineCode",{parentName:"p"},"${release_name}")," is the ",(0,i.kt)("inlineCode",{parentName:"p"},"release name")," you set when ",(0,i.kt)("inlineCode",{parentName:"p"},"helm install")," is executed. ",(0,i.kt)("inlineCode",{parentName:"p"},"${drainer_name}")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),"."),(0,i.kt)("p",{parentName:"li"},"  Finally, generate the Drainer server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal drainer-server.json | cfssljson -bare drainer-server\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiCDC"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the default ",(0,i.kt)("inlineCode",{parentName:"p"},"ticdc-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > ticdc-server.json\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "${cluster_name}-ticdc",\n      "${cluster_name}-ticdc.${namespace}",\n      "${cluster_name}-ticdc.${namespace}.svc",\n      "${cluster_name}-ticdc-peer",\n      "${cluster_name}-ticdc-peer.${namespace}",\n      "${cluster_name}-ticdc-peer.${namespace}.svc",\n      "*.${cluster_name}-ticdc-peer",\n      "*.${cluster_name}-ticdc-peer.${namespace}",\n      "*.${cluster_name}-ticdc-peer.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the TiCDC server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal ticdc-server.json | cfssljson -bare ticdc-server\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiFlash"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the default ",(0,i.kt)("inlineCode",{parentName:"p"},"tiflash-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > tiflash-server.json\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "${cluster_name}-tiflash",\n      "${cluster_name}-tiflash.${namespace}",\n      "${cluster_name}-tiflash.${namespace}.svc",\n      "${cluster_name}-tiflash-peer",\n      "${cluster_name}-tiflash-peer.${namespace}",\n      "${cluster_name}-tiflash-peer.${namespace}.svc",\n      "*.${cluster_name}-tiflash-peer",\n      "*.${cluster_name}-tiflash-peer.${namespace}",\n      "*.${cluster_name}-tiflash-peer.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the TiFlash server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal tiflash-server.json | cfssljson -bare tiflash-server\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiKV Importer"),(0,i.kt)("p",{parentName:"li"},"  If you need to ",(0,i.kt)("a",{parentName:"p",href:"/docusaurus-operator/restore-data-using-tidb-lightning"},"restore data using TiDB Lightning"),", you need to generate a server-side certificate for the TiKV Importer component."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the default ",(0,i.kt)("inlineCode",{parentName:"p"},"importer-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > importer-server.json\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "${cluster_name}-importer",\n      "${cluster_name}-importer.${namespace}",\n      "${cluster_name}-importer.${namespace}.svc"\n      "${cluster_name}-importer.${namespace}.svc",\n      "*.${cluster_name}-importer",\n      "*.${cluster_name}-importer.${namespace}",\n      "*.${cluster_name}-importer.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the TiKV Importer server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal importer-server.json | cfssljson -bare importer-server\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiDB Lightning"),(0,i.kt)("p",{parentName:"li"},"  If you need to ",(0,i.kt)("a",{parentName:"p",href:"/docusaurus-operator/restore-data-using-tidb-lightning"},"restore data using TiDB Lightning"),", you need to generate a server-side certificate for the TiDB Lightning component."),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the default ",(0,i.kt)("inlineCode",{parentName:"p"},"lightning-server.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > lightning-server.json\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [\n      "127.0.0.1",\n      "::1",\n      "${cluster_name}-lightning",\n      "${cluster_name}-lightning.${namespace}",\n      "${cluster_name}-lightning.${namespace}.svc"\n    ],\n...\n')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the TiDB Lightning server-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=internal lightning-server.json | cfssljson -bare lightning-server\n"))))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the client-side certificate:"),(0,i.kt)("p",{parentName:"li"},"First, create the default ",(0,i.kt)("inlineCode",{parentName:"p"},"client.json")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl print-defaults csr > client.json\n")),(0,i.kt)("p",{parentName:"li"},"Then, edit this file to change the ",(0,i.kt)("inlineCode",{parentName:"p"},"CN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," attributes. You can leave the ",(0,i.kt)("inlineCode",{parentName:"p"},"hosts")," empty:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'...\n    "CN": "TiDB",\n    "hosts": [],\n...\n')),(0,i.kt)("p",{parentName:"li"},"Finally, generate the client-side certificate:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=client client.json | cfssljson -bare client\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the Kubernetes Secret object:"),(0,i.kt)("p",{parentName:"li"},"If you have already generated a set of certificates for each component and a set of client-side certificate for each client as described in the above steps, create the Secret objects for the TiDB cluster by executing the following command:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The PD cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-pd-cluster-secret --namespace=${namespace} --from-file=tls.crt=pd-server.pem --from-file=tls.key=pd-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The TiKV cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-tikv-cluster-secret --namespace=${namespace} --from-file=tls.crt=tikv-server.pem --from-file=tls.key=tikv-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The TiDB cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-tidb-cluster-secret --namespace=${namespace} --from-file=tls.crt=tidb-server.pem --from-file=tls.key=tidb-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Pump cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-pump-cluster-secret --namespace=${namespace} --from-file=tls.crt=pump-server.pem --from-file=tls.key=pump-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The Drainer cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-drainer-cluster-secret --namespace=${namespace} --from-file=tls.crt=drainer-server.pem --from-file=tls.key=drainer-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The TiCDC cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-ticdc-cluster-secret --namespace=${namespace} --from-file=tls.crt=ticdc-server.pem --from-file=tls.key=ticdc-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The TiFlash cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-tiflash-cluster-secret --namespace=${namespace} --from-file=tls.crt=tiflash-server.pem --from-file=tls.key=tiflash-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The TiKV Importer cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-importer-cluster-secret --namespace=${namespace} --from-file=tls.crt=importer-server.pem --from-file=tls.key=importer-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The TiDB Lightning cluster certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-lightning-cluster-secret --namespace=${namespace} --from-file=tls.crt=lightning-server.pem --from-file=tls.key=lightning-server-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The client certificate Secret:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl create secret generic ${cluster_name}-cluster-client-secret --namespace=${namespace} --from-file=tls.crt=client.pem --from-file=tls.key=client-key.pem --from-file=ca.crt=ca.pem\n")))),(0,i.kt)("p",{parentName:"li"},"You have created two Secret objects:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"One Secret object for each PD/TiKV/TiDB/Pump/Drainer server-side certificate to load when the server is started;"),(0,i.kt)("li",{parentName:"ul"},"One Secret object for their clients to connect.")))),(0,i.kt)("h3",{id:"using-cert-manager"},"Using ",(0,i.kt)("inlineCode",{parentName:"h3"},"cert-manager")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager"),"."),(0,i.kt)("p",{parentName:"li"},"Refer to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.cert-manager.io/en/release-0.11/getting-started/install/kubernetes.html"},"cert-manager installation in Kubernetes")," for details.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create an Issuer to issue certificates to the TiDB cluster."),(0,i.kt)("p",{parentName:"li"},"To configure ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager"),", create the Issuer resources."),(0,i.kt)("p",{parentName:"li"},"First, create a directory which saves the files that ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," needs to create certificates:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir -p cert-manager\ncd cert-manager\n")),(0,i.kt)("p",{parentName:"li"},"Then, create a ",(0,i.kt)("inlineCode",{parentName:"p"},"tidb-cluster-issuer.yaml")," file with the following content:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: ${cluster_name}-selfsigned-ca-issuer\n  namespace: ${namespace}\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-ca\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-ca-secret\n  commonName: "TiDB"\n  isCA: true\n  duration: 87600h # 10yrs\n  renewBefore: 720h # 30d\n  issuerRef:\n    name: ${cluster_name}-selfsigned-ca-issuer\n    kind: Issuer\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: ${cluster_name}-tidb-issuer\n  namespace: ${namespace}\nspec:\n  ca:\n    secretName: ${cluster_name}-ca-secret\n')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. The above YAML file creates three objects:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"An Issuer object of the SelfSigned type, used to generate the CA certificate needed by Issuer of the CA type;"),(0,i.kt)("li",{parentName:"ul"},"A Certificate object, whose ",(0,i.kt)("inlineCode",{parentName:"li"},"isCa")," is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,i.kt)("li",{parentName:"ul"},"An Issuer, used to issue TLS certificates between TiDB components.")),(0,i.kt)("p",{parentName:"li"},"Finally, execute the following command to create an Issuer:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f tidb-cluster-issuer.yaml\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the server-side certificate."),(0,i.kt)("p",{parentName:"li"},"In ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager"),", the Certificate resource represents the certificate interface. This certificate is issued and updated by the Issuer created in Step 2."),(0,i.kt)("p",{parentName:"li"},"According to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pingcap.com/tidb/stable/enable-tls-between-components"},"Enable TLS Authentication"),", each component needs a server-side certificate, and all components need a shared client-side certificate for their clients."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"PD"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-pd-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-pd-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "${cluster_name}-pd"\n  - "${cluster_name}-pd.${namespace}"\n  - "${cluster_name}-pd.${namespace}.svc"\n  - "${cluster_name}-pd-peer"\n  - "${cluster_name}-pd-peer.${namespace}"\n  - "${cluster_name}-pd-peer.${namespace}.svc"\n  - "*.${cluster_name}-pd-peer"\n  - "*.${cluster_name}-pd-peer.${namespace}"\n  - "*.${cluster_name}-pd-peer.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. Configure the items as follows:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-pd-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-pd")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-pd.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-pd.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-pd-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-pd-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-pd-peer.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-pd-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-pd-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-pd-peer.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following two IPs in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IPs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-pd-cluster-secret")," Secret object to be used by the PD component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiKV"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-tikv-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-tikv-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "${cluster_name}-tikv"\n  - "${cluster_name}-tikv.${namespace}"\n  - "${cluster_name}-tikv.${namespace}.svc"\n  - "${cluster_name}-tikv-peer"\n  - "${cluster_name}-tikv-peer.${namespace}"\n  - "${cluster_name}-tikv-peer.${namespace}.svc"\n  - "*.${cluster_name}-tikv-peer"\n  - "*.${cluster_name}-tikv-peer.${namespace}"\n  - "*.${cluster_name}-tikv-peer.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. Configure the items as follows:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-tikv-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tikv")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tikv.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tikv.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tikv-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tikv-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tikv-peer.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tikv-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tikv-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tikv-peer.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IPs in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IPs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-tikv-cluster-secret")," Secret object to be used by the TiKV component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiDB"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-tidb-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-tidb-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "${cluster_name}-tidb"\n  - "${cluster_name}-tidb.${namespace}"\n  - "${cluster_name}-tidb.${namespace}.svc"\n  - "${cluster_name}-tidb-peer"\n  - "${cluster_name}-tidb-peer.${namespace}"\n  - "${cluster_name}-tidb-peer.${namespace}.svc"\n  - "*.${cluster_name}-tidb-peer"\n  - "*.${cluster_name}-tidb-peer.${namespace}"\n  - "*.${cluster_name}-tidb-peer.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. Configure the items as follows:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-tidb-cluster-secret"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tidb")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tidb.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tidb.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tidb-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tidb-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tidb-peer.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tidb-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tidb-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tidb-peer.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IPs in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IPs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-tidb-cluster-secret")," Secret object to be used by the TiDB component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Pump"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-pump-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-pump-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "*.${cluster_name}-pump"\n  - "*.${cluster_name}-pump.${namespace}"\n  - "*.${cluster_name}-pump.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. Configure the items as follows:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-pump-cluster-secret"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-pump")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-pump.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-pump.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IPs in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IPs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in the ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-pump-cluster-secret")," Secret object to be used by the Pump component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Drainer"),(0,i.kt)("p",{parentName:"li"},"  Drainer is deployed using Helm. The ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames")," field varies with different configuration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file."),(0,i.kt)("p",{parentName:"li"},"  If you set the ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," attributes when deploying Drainer as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n# Changes the name of the statefulset and Pod.\n# The default value is clusterName-ReleaseName-drainer\n# Does not change the name of an existing running Drainer, which is unsupported.\ndrainerName: my-drainer\n...\n")),(0,i.kt)("p",{parentName:"li"},"  Then you need to configure the certificate as described below:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-drainer-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-drainer-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "*.${drainer_name}"\n  - "*.${drainer_name}.${namespace}"\n  - "*.${drainer_name}.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  If you didn't set the ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," attribute when deploying Drainer, configure the ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames")," attributes as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-drainer-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-drainer-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "*.${cluster_name}-${release_name}-drainer"\n  - "*.${cluster_name}-${release_name}-drainer.${namespace}"\n  - "*.${cluster_name}-${release_name}-drainer.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. ",(0,i.kt)("inlineCode",{parentName:"p"},"${namespace}")," is the namespace in which the TiDB cluster is deployed. ",(0,i.kt)("inlineCode",{parentName:"p"},"${release_name}")," is the ",(0,i.kt)("inlineCode",{parentName:"p"},"release name")," you set when ",(0,i.kt)("inlineCode",{parentName:"p"},"helm install")," is executed. ",(0,i.kt)("inlineCode",{parentName:"p"},"${drainer_name}")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file. You can also add your customized ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),"."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-drainer-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"See the above descriptions for ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IPs in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IPs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-drainer-cluster-secret")," Secret object to be used by the Drainer component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiCDC"),(0,i.kt)("p",{parentName:"li"},"  Starting from v4.0.3, TiCDC supports TLS. TiDB Operator supports enabling TLS for TiCDC since v1.1.3."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-ticdc-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-ticdc-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "${cluster_name}-ticdc"\n  - "${cluster_name}-ticdc.${namespace}"\n  - "${cluster_name}-ticdc.${namespace}.svc"\n  - "${cluster_name}-ticdc-peer"\n  - "${cluster_name}-ticdc-peer.${namespace}"\n  - "${cluster_name}-ticdc-peer.${namespace}.svc"\n  - "*.${cluster_name}-ticdc-peer"\n  - "*.${cluster_name}-ticdc-peer.${namespace}"\n  - "*.${cluster_name}-ticdc-peer.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  In the file, ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-ticdc-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-ticdc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-ticdc.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-ticdc.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-ticdc-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-ticdc-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-ticdc-peer.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-ticdc-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-ticdc-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-ticdc-peer.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IPs in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IPs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-ticdc-cluster-secret")," Secret object to be used by the TiCDC component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiFlash"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-tiflash-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-tiflash-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "${cluster_name}-tiflash"\n  - "${cluster_name}-tiflash.${namespace}"\n  - "${cluster_name}-tiflash.${namespace}.svc"\n  - "${cluster_name}-tiflash-peer"\n  - "${cluster_name}-tiflash-peer.${namespace}"\n  - "${cluster_name}-tiflash-peer.${namespace}.svc"\n  - "*.${cluster_name}-tiflash-peer"\n  - "*.${cluster_name}-tiflash-peer.${namespace}"\n  - "*.${cluster_name}-tiflash-peer.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  In the file, ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-tiflash-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tiflash")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tiflash.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tiflash.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tiflash-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tiflash-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-tiflash-peer.${namespace}.svc")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tiflash-peer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tiflash-peer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.${cluster_name}-tiflash-peer.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IP addresses in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IP addresses according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-tiflash-cluster-secret")," Secret object to be used by the TiFlash component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiKV Importer"),(0,i.kt)("p",{parentName:"li"},"  If you need to ",(0,i.kt)("a",{parentName:"p",href:"/docusaurus-operator/restore-data-using-tidb-lightning"},"restore data using TiDB Lightning"),", you need to generate a server-side certificate for the TiKV Importer component."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-importer-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-importer-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "${cluster_name}-importer"\n  - "${cluster_name}-importer.${namespace}"\n  - "${cluster_name}-importer.${namespace}.svc"\n  - "*.${cluster_name}-importer"\n  - "*.${cluster_name}-importer.${namespace}"\n  - "*.${cluster_name}-importer.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  In the file, ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-importer-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-importer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-importer.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-importer.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IP addresses in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IP addresses according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-importer-cluster-secret")," Secret object to be used by the TiKV Importer component of the TiDB server.")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"TiDB Lightning"),(0,i.kt)("p",{parentName:"li"},"  If you need to ",(0,i.kt)("a",{parentName:"p",href:"/docusaurus-operator/restore-data-using-tidb-lightning"},"restore data using TiDB Lightning"),", you need to generate a server-side certificate for the TiDB Lightning component."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-lightning-cluster-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-lightning-cluster-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n    - server auth\n    - client auth\n  dnsNames:\n  - "${cluster_name}-lightning"\n  - "${cluster_name}-lightning.${namespace}"\n  - "${cluster_name}-lightning.${namespace}.svc"\n  ipAddresses:\n  - 127.0.0.1\n  - ::1\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},"  In the file, ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-lightning-cluster-secret"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add ",(0,i.kt)("inlineCode",{parentName:"p"},"server auth")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"usages"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following DNSs in ",(0,i.kt)("inlineCode",{parentName:"p"},"dnsNames"),". You can also add other DNSs according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-lightning")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-lightning.${namespace}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-lightning.${namespace}.svc")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the following 2 IP addresses in ",(0,i.kt)("inlineCode",{parentName:"p"},"ipAddresses"),". You can also add other IP addresses according to your needs:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"127.0.0.1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"::1")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"p"},"issuerRef"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),"."),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-lightning-cluster-secret")," Secret object to be used by the TiDB Lightning component of the TiDB server.")))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Generate the client-side certificate for components of the TiDB cluster."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: ${cluster_name}-cluster-client-secret\n  namespace: ${namespace}\nspec:\n  secretName: ${cluster_name}-cluster-client-secret\n  duration: 8760h # 365d\n  renewBefore: 360h # 15d\n  subject:\n    organizations:\n    - PingCAP\n  commonName: "TiDB"\n  usages:\n  - client auth\n  issuerRef:\n    name: ${cluster_name}-tidb-issuer\n    kind: Issuer\n    group: cert-manager.io\n')),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}")," is the name of the cluster. Configure the items as follows:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"spec.secretName")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"${cluster_name}-cluster-client-secret"),"."),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"client auth")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"usages"),"."),(0,i.kt)("li",{parentName:"ul"},"You can leave ",(0,i.kt)("inlineCode",{parentName:"li"},"dnsNames")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"ipAddresses")," empty."),(0,i.kt)("li",{parentName:"ul"},"Add the Issuer created above in ",(0,i.kt)("inlineCode",{parentName:"li"},"issuerRef"),"."),(0,i.kt)("li",{parentName:"ul"},"For other attributes, refer to ",(0,i.kt)("a",{parentName:"li",href:"https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec"},"cert-manager API"),".")),(0,i.kt)("p",{parentName:"li"},"After the object is created, ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-manager")," generates a ",(0,i.kt)("inlineCode",{parentName:"p"},"${cluster_name}-cluster-client-secret")," Secret object to be used by the clients of the TiDB components."))),(0,i.kt)("h2",{id:"deploy-the-tidb-cluster"},"Deploy the TiDB cluster"),(0,i.kt)("p",null,"When you deploy a TiDB cluster, you can enable TLS between TiDB components, and set the ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-allowed-cn")," configuration item (for TiDB, the configuration item is ",(0,i.kt)("inlineCode",{parentName:"p"},"cluster-verify-cn"),") to verify the CN (Common Name) of each component's certificate."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Currently, you can set only one value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"cert-allowed-cn")," configuration item of PD. Therefore, the ",(0,i.kt)("inlineCode",{parentName:"p"},"commonName")," of all ",(0,i.kt)("inlineCode",{parentName:"p"},"Certificate")," objects must be the same."))),(0,i.kt)("p",null,"In this step, you need to perform the following operations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a TiDB cluster"),(0,i.kt)("li",{parentName:"ul"},"Enable TLS between the TiDB components, and enable CN verification"),(0,i.kt)("li",{parentName:"ul"},"Deploy a monitoring system"),(0,i.kt)("li",{parentName:"ul"},"Deploy the Pump component, and enable CN verification")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a TiDB cluster:"),(0,i.kt)("p",{parentName:"li"},"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"tidb-cluster.yaml")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: pingcap.com/v1alpha1\nkind: TidbCluster\nmetadata:\n name: ${cluster_name}\n namespace: ${namespace}\nspec:\n tlsCluster:\n   enabled: true\n version: v5.3.0\n timezone: UTC\n pvReclaimPolicy: Retain\n pd:\n   baseImage: pingcap/pd\n   maxFailoverCount: 0\n   replicas: 1\n   requests:\n     storage: "10Gi"\n   config:\n     security:\n       cert-allowed-cn:\n         - TiDB\n tikv:\n   baseImage: pingcap/tikv\n   maxFailoverCount: 0\n   replicas: 1\n   requests:\n     storage: "100Gi"\n   config:\n     security:\n       cert-allowed-cn:\n         - TiDB\n tidb:\n   baseImage: pingcap/tidb\n   maxFailoverCount: 0\n   replicas: 1\n   service:\n     type: ClusterIP\n   config:\n     security:\n       cluster-verify-cn:\n         - TiDB\n pump:\n   baseImage: pingcap/tidb-binlog\n   replicas: 1\n   requests:\n     storage: "100Gi"\n   config:\n     security:\n       cert-allowed-cn:\n         - TiDB\n---\napiVersion: pingcap.com/v1alpha1\nkind: TidbMonitor\nmetadata:\n name: ${cluster_name}\n namespace: ${namespace}\nspec:\n clusters:\n - name: ${cluster_name}\n prometheus:\n   baseImage: prom/prometheus\n   version: v2.27.1\n grafana:\n   baseImage: grafana/grafana\n   version: 7.5.11\n initializer:\n   baseImage: pingcap/tidb-monitor-initializer\n   version: v5.3.0\n reloader:\n   baseImage: pingcap/tidb-monitor-reloader\n   version: v1.0.1\n imagePullPolicy: IfNotPresent\n')),(0,i.kt)("p",{parentName:"li"},"Execute ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl apply -f tidb-cluster.yaml")," to create a TiDB cluster."),(0,i.kt)("p",{parentName:"li"},"This operation also includes deploying a monitoring system and the Pump component.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a Drainer component and enable TLS and CN verification:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method 1: Set ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," when you create Drainer."),(0,i.kt)("p",{parentName:"li"},"  Edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file, set ",(0,i.kt)("inlineCode",{parentName:"p"},"drainer-name"),", and enable the TLS feature:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"...\ndrainerName: ${drainer_name}\ntlsCluster:\n  enabled: true\n  certAllowedCN:\n    - TiDB\n...\n")),(0,i.kt)("p",{parentName:"li"},"  Deploy the Drainer cluster:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"helm install ${release_name} pingcap/tidb-drainer --namespace=${namespace} --version=${helm_version} -f values.yaml\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Method 2: Do not set ",(0,i.kt)("inlineCode",{parentName:"p"},"drainerName")," when you create Drainer."),(0,i.kt)("p",{parentName:"li"},"  Edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"values.yaml")," file, and enable the TLS feature:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"...\ntlsCluster:\n  enabled: true\n  certAllowedCN:\n    - TiDB\n...\n")),(0,i.kt)("p",{parentName:"li"},"  Deploy the Drainer cluster:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"helm install ${release_name} pingcap/tidb-drainer --namespace=${namespace} --version=${helm_version} -f values.yaml\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create the Backup/Restore resource object:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"backup.yaml")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: pingcap.com/v1alpha1\nkind: Backup\nmetadata:\n  name: ${cluster_name}-backup\n  namespace: ${namespace}\nspec:\n  backupType: full\n  br:\n    cluster: ${cluster_name}\n    clusterNamespace: ${namespace}\n    sendCredToTikv: true\n  from:\n    host: ${host}\n    secretName: ${tidb_secret}\n    port: 4000\n    user: root\n  s3:\n    provider: aws\n    region: ${my_region}\n    secretName: ${s3_secret}\n    bucket: ${my_bucket}\n    prefix: ${my_folder}\n")),(0,i.kt)("p",{parentName:"li"},"  Deploy Backup:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f backup.yaml\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"restore.yaml")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: pingcap.com/v1alpha1\nkind: Restore\nmetadata:\n name: ${cluster_name}-restore\n namespace: ${namespace}\nspec:\n backupType: full\n br:\n   cluster: ${cluster_name}\n   clusterNamespace: ${namespace}\n   sendCredToTikv: true\n to:\n   host: ${host}\n   secretName: ${tidb_secret}\n   port: 4000\n   user: root\n s3:\n   provider: aws\n   region: ${my_region}\n   secretName: ${s3_secret}\n   bucket: ${my_bucket}\n   prefix: ${my_folder}\n")),(0,i.kt)("p",{parentName:"li"},"  Deploy Restore:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f restore.yaml\n")))))),(0,i.kt)("h2",{id:"configure-pd-ctl-tikv-ctl-and-connect-to-the-cluster"},"Configure ",(0,i.kt)("inlineCode",{parentName:"h2"},"pd-ctl"),", ",(0,i.kt)("inlineCode",{parentName:"h2"},"tikv-ctl")," and connect to the cluster"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Mount the certificates."),(0,i.kt)("p",{parentName:"li"},"Configure ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.pd.mountClusterClientSecret: true")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.tikv.mountClusterClientSecret: true")," with the following command:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'kubectl patch tc ${cluster_name} -n ${namespace} --type merge -p \'{"spec":{"pd":{"mountClusterClientSecret": true},"tikv":{"mountClusterClientSecret": true}}}\'\n')),(0,i.kt)("blockquote",{parentName:"li"},(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note:")),(0,i.kt)("ul",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ul"},"The above configuration will trigger the rolling update of PD and TiKV cluster."),(0,i.kt)("li",{parentName:"ul"},"The above configurations are supported since TiDB Operator v1.1.5.")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"pd-ctl")," to connect to the PD cluster."),(0,i.kt)("p",{parentName:"li"},"Get into the PD Pod:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -it ${cluster_name}-pd-0 -n ${namespace} sh\n")),(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"pd-ctl"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd /var/lib/cluster-client-tls\n/pd-ctl --cacert=ca.crt --cert=tls.crt --key=tls.key -u https://127.0.0.1:2379 member\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"tikv-ctl")," to connect to the TiKV cluster."),(0,i.kt)("p",{parentName:"li"},"Get into the TiKV Pod:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -it ${cluster_name}-tikv-0 -n ${namespace} sh\n")),(0,i.kt)("p",{parentName:"li"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"tikv-ctl"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cd /var/lib/cluster-client-tls\n/tikv-ctl --ca-path=ca.crt --cert-path=tls.crt --key-path=tls.key --host 127.0.0.1:20160 cluster\n")))))}d.isMDXComponent=!0}}]);