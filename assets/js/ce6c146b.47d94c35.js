"use strict";(self.webpackChunkpingcap_docs=self.webpackChunkpingcap_docs||[]).push([[1819],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,c(c({ref:t},p),{},{components:r})):n.createElement(f,c({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,c=new Array(i);c[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<i;s++)c[s]=r[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2059:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},assets:function(){return p},toc:function(){return u},default:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),c=["components"],o={title:"Replicate Data to TLS-enabled Downstream Services",summary:"Learn how to replicate data to TLS-enabled downstream services."},l="Replicate Data to TLS-enabled Downstream Services",s={unversionedId:"enable-tls-for-ticdc-sink",id:"enable-tls-for-ticdc-sink",title:"Replicate Data to TLS-enabled Downstream Services",description:"This document describes how to replicate data to TLS-enabled downstream services on Kubernetes.",source:"@site/docs/enable-tls-for-ticdc-sink.md",sourceDirName:".",slug:"/enable-tls-for-ticdc-sink",permalink:"/docusaurus-operator/enable-tls-for-ticdc-sink",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/enable-tls-for-ticdc-sink.md",tags:[],version:"current",frontMatter:{title:"Replicate Data to TLS-enabled Downstream Services",summary:"Learn how to replicate data to TLS-enabled downstream services."},sidebar:"mySidebar",previous:{title:"Enable TLS for DM",permalink:"/docusaurus-operator/enable-tls-for-dm"},next:{title:"Renew and Replace the TLS Certificate",permalink:"/docusaurus-operator/renew-tls-certificate"}},p={},u=[{value:"Preparations",id:"preparations",level:2},{value:"Steps",id:"steps",level:2}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,c);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"replicate-data-to-tls-enabled-downstream-services"},"Replicate Data to TLS-enabled Downstream Services"),(0,i.kt)("p",null,"This document describes how to replicate data to TLS-enabled downstream services on Kubernetes."),(0,i.kt)("h2",{id:"preparations"},"Preparations"),(0,i.kt)("p",null,"Before you begin, do the following preparations:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Deploy a downstream service, and enable the TLS authentication on the client."),(0,i.kt)("li",{parentName:"ol"},"Generate the key file required for the client to access the downstream service.")),(0,i.kt)("h2",{id:"steps"},"Steps"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a Kubernetes Secret object that contains a client TLS certificate used to access the downstream service. You can get the certificate from the key file you generated for the client."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"  kubectl create secret generic ${secret_name} --namespace=${cluster_namespace} --from-file=tls.crt=client.pem --from-file=tls.key=client-key.pem --from-file=ca.crt=ca.pem\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Mount the certificate file to the ",(0,i.kt)("a",{parentName:"p",href:"/docusaurus-operator/deploy-ticdc"},"TiCDC")," Pod."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you have not deployed a TiDB cluster yet, add the ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.ticdc.tlsClientSecretNames")," field to the TidbCluster CR definition, and then deploy the TiDB cluster.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If you have already deployed a TiDB cluster, run ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl edit tc ${cluster_name} -n ${cluster_namespace}"),", add the ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.tiddc.tlsClientSecretNames")," field, and then wait for the TiCDC pod to automatically roll over for updates."))),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: pingcap.com/v1alpha1\nkind: TidbCluster\nmetadata:\n  name: ${cluster_name}\n  namespace: ${cluster_namespace}\nspec:\n  # ...\n  ticdc:\n    baseImage: pingcap/ticdc\n    version: "v5.0.1"\n    # ...\n    tlsClientSecretNames:\n    - ${secret_name}\n')),(0,i.kt)("p",{parentName:"li"},"Once the TiCDC Pod is running, the created Kubernetes Secret object is mounted to the TiCDC Pod. You can get the mounted key file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/var/lib/sink-tls/${secret_name}")," directory of the Pod.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a replication task using the ",(0,i.kt)("inlineCode",{parentName:"p"},"cdc cli")," tool."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'kubectl exec ${cluster_name}-ticdc-0 -- /cdc cli changefeed create --pd=https://${cluster_name}-pd:2379 --sink-uri="mysql://${user}:{$password}@${downstream_service}/?ssl-ca=/var/lib/sink-tls/${secret_name}/ca.crt&ssl-cert=/var/lib/sink-tls/${secret_name}/tls.crt&ssl-key=/var/lib/sink-tls/${secret_name}/tls.key"\n')))))}m.isMDXComponent=!0}}]);