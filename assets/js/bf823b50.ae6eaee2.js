"use strict";(self.webpackChunkpingcap_docs=self.webpackChunkpingcap_docs||[]).push([[4961],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(i,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(k,o(o({ref:t},p),{},{components:n})):r.createElement(k,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8778:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},assets:function(){return p},toc:function(){return u},default:function(){return m}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),o=["components"],s={title:"Build Multiple Interconnected GCP GKE Clusters",summary:"Learn how to build multiple interconnected GCP GKE clusters and prepare for deploying a TiDB cluster across multiple GKE clusters."},i="Build Multiple Interconnected GCP GKE Clusters",c={unversionedId:"build-multi-gcp-gke",id:"build-multi-gcp-gke",title:"Build Multiple Interconnected GCP GKE Clusters",description:"This document describes how to create multiple GCP GKE clusters and configure network peering between these clusters. These interconnected clusters can be used for deploying TiDB clusters across multiple Kubernetes clusters. The example in this document shows how to configure three-cluster network peering.",source:"@site/docs/build-multi-gcp-gke.md",sourceDirName:".",slug:"/build-multi-gcp-gke",permalink:"/build-multi-gcp-gke",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/build-multi-gcp-gke.md",tags:[],version:"current",frontMatter:{title:"Build Multiple Interconnected GCP GKE Clusters",summary:"Learn how to build multiple interconnected GCP GKE clusters and prepare for deploying a TiDB cluster across multiple GKE clusters."},sidebar:"mySidebar",previous:{title:"Build Multiple Interconnected AWS EKS Clusters",permalink:"/build-multi-aws-eks"},next:{title:"Deploy a TiDB Cluster across Multiple Kubernetes Clusters",permalink:"/deploy-tidb-cluster-across-multiple-kubernetes"}},p={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configure GCP service",id:"configure-gcp-service",level:2},{value:"Step 1. Create a VPC network",id:"step-1-create-a-vpc-network",level:2},{value:"Step 2. Start the Kubernetes cluster",id:"step-2-start-the-kubernetes-cluster",level:2},{value:"Configure the firewall rules",id:"configure-the-firewall-rules",level:3},{value:"Step 3. Verify the network interconnectivity",id:"step-3-verify-the-network-interconnectivity",level:2},{value:"Step 4. Deploy TiDB Operator",id:"step-4-deploy-tidb-operator",level:2},{value:"Step 5. Deploy TiDB clusters",id:"step-5-deploy-tidb-clusters",level:2},{value:"What&#39;s next",id:"whats-next",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"build-multiple-interconnected-gcp-gke-clusters"},"Build Multiple Interconnected GCP GKE Clusters"),(0,l.kt)("p",null,"This document describes how to create multiple GCP GKE clusters and configure network peering between these clusters. These interconnected clusters can be used for ",(0,l.kt)("a",{parentName:"p",href:"/deploy-tidb-cluster-across-multiple-kubernetes"},"deploying TiDB clusters across multiple Kubernetes clusters"),". The example in this document shows how to configure three-cluster network peering."),(0,l.kt)("p",null,"If you need to deploy TiDB on a single GCP GKE cluster, refer to ",(0,l.kt)("a",{parentName:"p",href:"/deploy-on-gcp-gke"},"Deploy TiDB on GCP GKE"),"."),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"Before you deploy GKE clusters, make sure you have completed the following preparations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Install ",(0,l.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm 3"),". You need to use Helm to install TiDB Operator."),(0,l.kt)("li",{parentName:"ul"},"Install ",(0,l.kt)("a",{parentName:"li",href:"https://cloud.google.com/sdk/gcloud"},"gcloud"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"gcloud")," is the CLI for creating and managing GCP services"),(0,l.kt)("li",{parentName:"ul"},"Complete the ",(0,l.kt)("em",{parentName:"li"},"Before you begin")," section in ",(0,l.kt)("a",{parentName:"li",href:"https://cloud.google.com/kubernetes-engine/docs/quickstart#before-you-begin"},"GKE Quickstart"),".")),(0,l.kt)("h2",{id:"configure-gcp-service"},"Configure GCP service"),(0,l.kt)("p",null,"Configure your GCP project by running the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud config set core/project <gcp-project>\n")),(0,l.kt)("h2",{id:"step-1-create-a-vpc-network"},"Step 1. Create a VPC network"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create a VPC network with custom subnets:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute networks create ${network_name} --subnet-mode=custom\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"In the VPC network created above, create three subnets that belong to different regions. The CIDR block of each subnet does not overlap with that of each other."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute networks subnets create ${subnet_1} \\\n    --region=${region_1} \\\n    --network=${network_name} \\\n    --range=10.0.0.0/16 \\\n    --secondary-range pods=10.10.0.0/16,services=10.100.0.0/16\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute networks subnets create ${subnet_2} \\\n    --region=${region_2} \\\n    --network=${network_name} \\\n    --range=10.1.0.0/16 \\\n    --secondary-range pods=10.11.0.0/16,services=10.101.0.0/16\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute networks subnets create ${subnet_3} \\\n    --region=${region_3} \\\n    --network=${network_name} \\\n    --range=10.2.0.0/16 \\\n    --secondary-range pods=10.12.0.0/16,services=10.102.0.0/16\n")),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"${subnet_1}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"${subnet_2}"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"${subnet_3}")," refer to the names of the three subnets."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--range=10.0.0.0/16")," specifies the CIDR block of the ",(0,l.kt)("inlineCode",{parentName:"p"},"${subnet_1}")," in the cluster. The CIDR blocks of all cluster subnets ",(0,l.kt)("strong",{parentName:"p"},"must not")," overlap with each other."),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"--secondary-range pods=10.11.0.0/16,services=10.101.0.0/16")," specifies the CIRD block used by Kubernetes Pods and Services. This CIRD block will be used later."))),(0,l.kt)("h2",{id:"step-2-start-the-kubernetes-cluster"},"Step 2. Start the Kubernetes cluster"),(0,l.kt)("p",null,"Create three GKE clusters, and each cluster uses one of the subnets created in Step 1."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create three GKE clusters. Each cluster has a default node pool."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud beta container clusters create ${cluster_1} \\\n    --region ${region_1} --num-nodes 1 \\\n    --network ${network_name} --subnetwork ${subnet_1} \\\n    --cluster-dns clouddns --cluster-dns-scope vpc \\\n    --cluster-dns-domain ${cluster_domain_1}\n    --enable-ip-alias \\\n    --cluster-secondary-range-name=pods --services-secondary-range-name=services\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud beta container clusters create ${cluster_2} \\\n    --region ${region_2} --num-nodes 1 \\\n    --network ${network_name} --subnetwork ${subnet_2} \\\n    --cluster-dns clouddns --cluster-dns-scope vpc \\\n    --cluster-dns-domain ${cluster_domain_2}\n    --enable-ip-alias \\\n    --cluster-secondary-range-name=pods --services-secondary-range-name=services\n")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud beta container clusters create ${cluster_3} \\\n    --region ${region_3} --num-nodes 1 \\\n    --network ${network_name} --subnetwork ${subnet_3} \\\n    --cluster-dns clouddns --cluster-dns-scope vpc \\\n    --cluster-dns-domain ${cluster_domain_3}\n    --enable-ip-alias \\\n    --cluster-secondary-range-name=pods --services-secondary-range-name=services\n")),(0,l.kt)("p",{parentName:"li"},"In the commands above, ",(0,l.kt)("inlineCode",{parentName:"p"},"${cluster_domain_n}")," refers to the domain name of the ",(0,l.kt)("inlineCode",{parentName:"p"},"n"),"th cluster. In the following deployment steps, you need to configure ",(0,l.kt)("inlineCode",{parentName:"p"},"spec.clusterDomain")," in TidbCluster CR to ",(0,l.kt)("inlineCode",{parentName:"p"},"${cluster_domain_n}"),"."),(0,l.kt)("p",{parentName:"li"},"In the commands above, the ",(0,l.kt)("a",{parentName:"p",href:"https://cloud.google.com/kubernetes-engine/docs/how-to/cloud-dns"},"Cloud DNS")," in VPC scope is used so that the cluster can parse the Pod and Service addresses in other clusters.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Create the dedicated node pools used by PD, TiKV, and TiDB for each cluster."),(0,l.kt)("p",{parentName:"li"},"Take cluster 1 as an example:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container node-pools create pd --cluster ${cluster_1} --machine-type n1-standard-4 --num-nodes=1 \\\n    --node-labels=dedicated=pd --node-taints=dedicated=pd:NoSchedule\ngcloud container node-pools create tikv --cluster ${cluster_1}  --machine-type n1-highmem-8 --num-nodes=1 \\\n    --node-labels=dedicated=tikv --node-taints=dedicated=tikv:NoSchedule\ngcloud container node-pools create tidb --cluster ${cluster_1}  --machine-type n1-standard-8 --num-nodes=1 \\\n    --node-labels=dedicated=tidb --node-taints=dedicated=tidb:NoSchedule\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Obtain the Kubernetes context of each cluster. The context will be used in the subsequent ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl")," commands."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl config get-contexts\n")),(0,l.kt)("p",{parentName:"li"},"The expected output is as follows. The context is in the ",(0,l.kt)("inlineCode",{parentName:"p"},"NAME")," column."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"CURRENT   NAME                          CLUSTER                       AUTHINFO                            NAMESPACE\n*         gke_pingcap_us-west1_tidb-1   gke_pingcap_us-west1_tidb-1   gke_pingcap_us-west1_tidb-1\n          gke_pingcap_us-west2_tidb-2   gke_pingcap_us-west2_tidb-2   gke_pingcap_us-west2_tidb-2\n          gke_pingcap_us-west3_tidb-3   gke_pingcap_us-west3_tidb-3   gke_pingcap_us-west3_tidb-3\n")),(0,l.kt)("p",{parentName:"li"},"In the following sections, ",(0,l.kt)("inlineCode",{parentName:"p"},"${context_1}"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"${context_2}"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"${context_3}")," refer to the context of each cluster."))),(0,l.kt)("h3",{id:"configure-the-firewall-rules"},"Configure the firewall rules"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Update the firewall rules for cluster 1."),(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Obtain the name of the firewall rule used for communication between GKE Pods. The name of the firewall rule is similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"gke-${cluster_1}-${hash}-all"),"."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute firewall-rules list --filter='name~gke-${cluster_1}-.*-all'\n")),(0,l.kt)("p",{parentName:"li"},"The expected output is as follows. The rule name is in the ",(0,l.kt)("inlineCode",{parentName:"p"},"NAME")," column."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"NAME                           NETWORK     DIRECTION  PRIORITY  ALLOW                         DENY  DISABLED\ngke-${cluster_1}-b8b48366-all  ${network}  INGRESS    1000      tcp,udp,icmp,esp,ah,sctp            False\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Update the source range of the firewall rule. Add the CIDR blocks of the Pod network of the other two clusters to the source range:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute firewall-rules update ${firewall_rule_name} --source-ranges 10.10.0.0/16,10.11.0.0/16,10.12.0.0/16\n")),(0,l.kt)("p",{parentName:"li"},"Run the following command to check whether the firewall rule is successfully updated:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud compute firewall-rules describe ${firewall_rule_name}\n"))))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Follow the same steps to update the firewall rules for cluster 2 and cluster 3."))),(0,l.kt)("h2",{id:"step-3-verify-the-network-interconnectivity"},"Step 3. Verify the network interconnectivity"),(0,l.kt)("p",null,"Before you deploy the TiDB cluster, you need to verify that the network between the GKE clusters is interconnected."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Save the following content in the ",(0,l.kt)("inlineCode",{parentName:"p"},"sample-nginx.yaml")," file."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: sample-nginx\n  labels:\n    app: sample-nginx\nspec:\n  hostname: sample-nginx\n  subdomain: sample-nginx-peer\n  containers:\n  - image: nginx:1.21.5\n    imagePullPolicy: IfNotPresent\n    name: nginx\n    ports:\n      - name: http\n        containerPort: 80\n  restartPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: sample-nginx-peer\nspec:\n  ports:\n    - port: 80\n  selector:\n    app: sample-nginx\n  clusterIP: None\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Deploy the nginx service in the namespaces of three clusters."),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context ${context_1} -n default apply -f sample-nginx.yaml\n\nkubectl --context ${context_2} -n default apply -f sample-nginx.yaml\n\nkubectl --context ${context_3} -n default apply -f sample-nginx.yaml\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Access the nginx services of each cluster to verify the network interconnectivity."),(0,l.kt)("p",{parentName:"li"},"The following command verifies the network from cluster 1 to cluster 2:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context ${context_1} exec sample-nginx -- curl http://sample-nginx.sample-nginx-peer.default.svc.${cluster_domain_2}:80\n")),(0,l.kt)("p",{parentName:"li"},"If the output is the welcome page of nginx, the network is connected.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"After the verification, delete the nginx services:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context ${context_1} -n default delete -f sample-nginx.yaml\nkubectl --context ${context_2} -n default delete -f sample-nginx.yaml\nkubectl --context ${context_3} -n default delete -f sample-nginx.yaml\n")))),(0,l.kt)("h2",{id:"step-4-deploy-tidb-operator"},"Step 4. Deploy TiDB Operator"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TidbCluster")," CR of each cluster is managed by TiDB Operator of the cluster. Therefore, you must deploy TiDB Operator for each cluster."),(0,l.kt)("p",null,"Refer to ",(0,l.kt)("a",{parentName:"p",href:"/deploy-tidb-operator"},"Deploy TiDB Operator")," and deploy TiDB Operator in each GKE cluster. Note that you need to use ",(0,l.kt)("inlineCode",{parentName:"p"},"kubectl --context ${context}")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"helm --kube-context ${context}")," in the commands to deploy TiDB Operator for each GKE cluster."),(0,l.kt)("h2",{id:"step-5-deploy-tidb-clusters"},"Step 5. Deploy TiDB clusters"),(0,l.kt)("p",null,"Refer to ",(0,l.kt)("a",{parentName:"p",href:"/deploy-tidb-cluster-across-multiple-kubernetes"},"Deploy a TiDB Cluster across Multiple Kubernetes Clusters"),", and deploy a ",(0,l.kt)("inlineCode",{parentName:"p"},"TidbCluster")," CR for each GKE cluster."),(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"TidbCluster")," CR, the ",(0,l.kt)("inlineCode",{parentName:"p"},"spec.clusterDomain")," field must be the same as ",(0,l.kt)("inlineCode",{parentName:"p"},"${cluster_domain_n}")," defined in ",(0,l.kt)("a",{parentName:"p",href:"#step-2-start-the-kubernetes-cluster"},"Step 2"),"."),(0,l.kt)("p",null,"For example, when you deploy the ",(0,l.kt)("inlineCode",{parentName:"p"},"TidbCluster")," CR to cluster 1, specify ",(0,l.kt)("inlineCode",{parentName:"p"},"spec.clusterDomain")," as ",(0,l.kt)("inlineCode",{parentName:"p"},"${cluster_domain_1}"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: pingcap.com/v1alpha1\nkind: TidbCluster\n# ...\nspec:\n  #..\n  clusterDomain: "${cluster_domain_1}"\n')),(0,l.kt)("h2",{id:"whats-next"},"What's next"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Read ",(0,l.kt)("a",{parentName:"li",href:"/deploy-tidb-cluster-across-multiple-kubernetes"},"Deploy a TiDB Cluster across Multiple Kubernetes Clusters")," to learn how to manage a TiDB cluster across multiple Kubernetes clusters.")))}m.isMDXComponent=!0}}]);